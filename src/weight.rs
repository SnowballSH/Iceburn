use crate::chess::{Chess, Color, Role, Setup};

pub const MATERIAL_OPENING: [i32; 6] = [110, 450, 470, 646, 1170, 20000];
pub const MATERIAL_ENDGAME: [i32; 6] = [140, 582, 617, 928, 1808, 20000];
pub const INF_SCORE: i32 = i32::MAX - 10000;

pub fn is_checkmate(value: i32) -> bool {
    2 * value.abs() >= INF_SCORE
}

/// https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function
pub const PSQ: [[i32; 64]; 7] = [
    [
        0, 0, 0, 0, 0, 0, 0, 0, 98, 134, 61, 95, 68, 126, 34, -11, -6, 7, 26, 31, 65, 56, 25, -20,
        -14, 13, 6, 21, 23, 12, 17, -23, -27, -2, -5, 12, 17, 6, 10, -25, -26, -4, -4, -10, 3, 3,
        33, -12, -35, -1, -20, -23, -15, 24, 38, -22, 0, 0, 0, 0, 0, 0, 0, 0,
    ],
    [
        -167, -89, -34, -49, 61, -97, -15, -107, -73, -41, 72, 36, 23, 62, 7, -17, -47, 60, 37, 65,
        84, 129, 73, 44, -9, 17, 19, 53, 37, 69, 18, 22, -13, 4, 16, 13, 28, 19, 21, -8, -23, -9,
        12, 10, 19, 17, 25, -16, -29, -53, -12, -3, -1, 18, -14, -19, -105, -21, -58, -33, -17,
        -28, -19, -23,
    ],
    [
        -29, 4, -82, -37, -25, -42, 7, -8, -26, 16, -18, -13, 30, 59, 18, -47, -16, 37, 43, 40, 35,
        50, 37, -2, -4, 5, 19, 50, 37, 37, 7, -2, -6, 13, 13, 26, 34, 12, 10, 4, 0, 15, 15, 15, 14,
        27, 18, 10, 4, 15, 16, 0, 7, 21, 33, 1, -33, -3, -14, -21, -13, -12, -39, -21,
    ],
    [
        32, 42, 32, 51, 63, 9, 31, 43, 27, 32, 58, 62, 80, 67, 26, 44, -5, 19, 26, 36, 17, 45, 61,
        16, -24, -11, 7, 26, 24, 35, -8, -20, -36, -26, -12, -1, 9, -7, 6, -23, -45, -25, -16, -17,
        3, 0, -5, -33, -44, -16, -20, -9, -1, 11, -6, -71, -19, -13, 1, 17, 16, 7, -37, -26,
    ],
    [
        -28, 0, 29, 12, 59, 44, 43, 45, -24, -39, -5, 1, -16, 57, 28, 54, -13, -17, 7, 8, 29, 56,
        47, 57, -27, -27, -16, -16, -1, 17, -2, 1, -9, -26, -9, -10, -2, -4, 3, -3, -14, 2, -11,
        -2, -5, 2, 14, 5, -35, -8, 11, 2, 8, 15, -3, 1, -1, -18, -9, 10, -15, -25, -31, -50,
    ],
    [
        -65, 23, 16, -15, -56, -34, 2, 13, 29, -1, -20, -7, -8, -4, -38, -29, -9, 24, 2, -16, -20,
        6, 22, -22, -17, -20, -12, -27, -30, -25, -14, -36, -49, -1, -27, -39, -46, -44, -33, -51,
        -14, -14, -22, -46, -44, -30, -15, -27, 1, 7, -8, -64, -43, -16, 9, 8, -15, 36, 12, -54, 8,
        -28, 24, 14,
    ],
    [
        -74, -35, -18, -18, -11, 15, 4, -17, -12, 17, 14, 17, 17, 38, 23, 11, 10, 17, 23, 15, 20,
        45, 44, 13, -8, 22, 24, 27, 26, 33, 26, 3, -18, -4, 21, 24, 27, 23, 9, -11, -19, -3, 11,
        21, 23, 16, 7, -9, -27, -11, 4, 13, 14, 4, -5, -17, -53, -34, -21, -11, -28, -14, -24, -43,
    ],
];

pub fn fast_eval(board: &Chess) -> i32 {
    let mut score = 0;
    for (sq, p) in board.board().pieces() {
        score += MATERIAL_OPENING[p.role as usize - 1] * (p.color as i32 * 2 - 1);
        score += PSQ[p.role as usize - 1][if p.color == Color::White {
            sq as usize
        } else {
            sq as usize ^ 56
        }] * (p.color as i32 * 2 - 1)
    }
    score * ((board.turn() as i32 * 2 - 1) as f64 * 1.7) as i32
}

pub fn fast_eval_endgame(board: &Chess) -> i32 {
    let mut score = 0;
    for (sq, p) in board.board().pieces() {
        score += MATERIAL_ENDGAME[p.role as usize - 1] * (p.color as i32 * 2 - 1);
        score += PSQ[if p.role == Role::King {
            6
        } else {
            p.role as usize - 1
        }][if p.color == Color::White {
            sq as usize
        } else {
            sq as usize ^ 56
        }] * (p.color as i32 * 2 - 1)
    }
    score * (board.turn() as i32 * 2 - 1) * 3
}
